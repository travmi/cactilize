---
# File: deploy.yml
#
# Description :
# Cacti Server setup task
#
# OS: Debian6 Debian7

- name: Install mariadb
  yum: name=mariadb-server state=latest

- name: Start mariadb
  service: name=mariadb state=started enabled=yes

- name: Copy mariadb config
  template: src=etc/my.cnf.j2 dest=/etc/my.cnf
  notify: restart mariadb

- name: Check if Cacti root dir is present
  stat: path={{ cacti_root_dir  }}
  ignore_errors: true
  register: cacti_web_root
  changed_when: cacti_root_dir.stat.isdir is defined and cacti_root_dir.stat.isdir == true

- debug: var=cacti_web_root

# Run mysql command and grep for cacti database
- name: check if Cacti DB exists
  shell: mysql -e "show databases;" | grep {{ cacti_db_name }}
  ignore_errors: true
  register: databases
  changed_when: databases.stdout == 1

# If cacti database exists and force deploy is false exit cacti installation
- name: Exit Cactilize execution
  fail: msg="Cacti or Cacti DB exist, please add deploy=force to extra-vars )"
  when: (cacti_web_root.stat.exists or databases.stdout.find('{{cacti_db_name}}') != -1) and deploy != "force"

- name: Create temp directory
  file: path={{ cactilize_temp_dir }} state=directory

- name: Create cacti user
  user: name=cacti comment="Cacti user for poller process and configuration"
  tags: master_user

- name: Create conf directory
  file: path={{ cacti_conf_dir }} state=directory

- name: Create SSH directory
  file: path={{ cacti_conf_dir }}/.ssh state=directory owner={{ cacti_user }} group={{ cacti_user }}

- name: Install Apache
  yum: name=httpd state=latest

- name: Start Apache
  service: name=httpd state=started enabled=yes

- name: Creates LOG directory
  file: path={{ cacti_log_dir }} state=directory owner={{ cacti_user }} group={{ apache_group }} mode=0775

- name: action | Create Cacti Logfile
  file:
    path={{ cacti_log_dir }}/cacti.log
    state=touch
    mode=664
    owner={{ cacti_user }}
    group={{ apache_group }}

- name: Install the PHP Repository Webtatic
  yum: name=https://mirror.webtatic.com/yum/el7/webtatic-release.rpm state=present

- name: Install the Webtatic GPG key
  rpm_key: state=present key=https://mirror.webtatic.com/yum/RPM-GPG-KEY-webtatic-el7

- name: Install requires
  yum: name={{ item }} update_cache=yes state=present
  with_items:
    - "{{ cacti_required_packages }}"
    - MySQL-python
    - python-passlib

- name: Download Cacti version {{ cacti_version }}
  get_url: url={{ cacti_package_source }}/cacti-{{ cacti_version }}.tar.gz dest={{ cactilize_temp_dir }}

- name: Deploy Cacti version {{ cacti_version }} for {{ archi }}
  unarchive: src={{ cactilize_temp_dir }}/cacti-{{ cacti_version }}.tar.gz dest={{ cactilize_temp_dir }} copy=no

# Attempting to use rsync to prevent errors with already existing directory with 'mv'
- name: Move to specified cacti root
  command: rsync -av --delete {{ cactilize_temp_dir }}/cacti-{{ cacti_version }} {{ cacti_root_dir }}

- name: Create Template directory
  file: path={{ cacti_root_dir  }}/templates owner=root group=root state=directory

- name: Create Cacti config file
  template: src=etc/config.php.j2  dest={{ cacti_config_file }} owner={{ cacti_user }} group={{ apache_group }} mode=0440

- name: Cacti configuration Step One
  file: src={{ cacti_config_file }} dest={{ cacti_root_dir }}/include/config.php owner={{ cacti_user }} group={{ apache_group }} state=link force=yes

- name: Create database {{ cacti_db_name }}
  mysql_db: name={{ cacti_db_name  }} state=present

- name: Grants for user {{ cacti_db_user  }}
  mysql_user: name={{ cacti_db_user }} password={{ cacti_db_password }} priv={{ cacti_db_name }}.*:ALL state=present

- name: Populate Cacti database
  mysql_db: name={{ cacti_db_name  }} state=import target={{ cacti_db_populate }}
  when: databases.rc == 1

- name: Cacti Alias deployment Step 1
  template: src=etc/httpd.conf.j2 dest={{ cacti_apache_conf }} owner=root group=root mode=0440
  notify: restart_httpd

- name: Cacti Vhost deployment Step 1
  template: src=etc/cacti.conf.j2 dest=/etc/httpd/conf.d/{{ domain_name }}.conf owner=root group=root mode=0440
  register: VHOST
  notify: restart httpd

- name: Add php.ini
  copy: src=php.ini dest=/etc/php.ini
  notify: restart httpd

- debug: var=VHOST

- name: Set Admin Htpasswd
  htpasswd: path=/etc/httpd/conf.d/.htpass_cacti name={{ webui_admin_user }} password={{ htpassword_admin }} owner=root group={{ apache_group }} mode=0440
  tags: htpasswd

- name: Set Users Htpasswd
  htpasswd: path=/etc/httpd/conf.d/.htpass_cacti name={{ item.key }} password={{ item.value.htpassword }} owner=root group={{ apache_group }} mode=0440
  with_dict: Users
  tags: htpasswd

- name: Postinstall Configuration
  template: src=postinstall.sql.j2 dest={{ cactilize_temp_dir }}/postinstall.sql

- name: Post Install Step 1
  mysql_db: name={{ cacti_db_name }} state=import target={{ cactilize_temp_dir }}/postinstall.sql

- name: Post Install Step 2
  file: path={{ cacti_rra_dir }} owner={{ cacti_user }} group={{ apache_group }} state=directory

- name: Post Install Step 3
  user: name=cacti comment="Cacti user for poller process" generate_ssh_key=yes ssh_key_file={{ cacti_conf_dir }}/.ssh/id_rsa
  when: deploy or (generate_ssh_key is defined and generate_ssh_key)

- name: Install bundler gem to run Gemfil
  gem: name=bundler state=latest

- name: Install Ruby Gems for ruby wrapper scripts
  bundler: state=latest

# No idea what this is for at the moment
#- name: Get SSH KEY
#  fetch: src={{ cacti_conf_dir }}/.ssh/id_rsa.pub dest=roles/cactilize/files/id_rsa.pub flat=yes

- name: Copy Scripts File
  template: src={{ item }} dest={{ cacti_root_dir }}/scripts/ owner={{ cacti_user }} group={{ apache_group }} mode=0440
  with_items:
    - scripts/ss_get_by_ssh.php
    - scripts/ss_get_mysql_stats.php
    - scripts/ss_get_rds_stats.py
    - scripts/ss_get_rds_stats.py
    - scripts/get_varnish_stats.py
    - scripts/elasticsearch_stats.rb

- name: Copy Percona Configuration File
  template: src={{ item }} dest={{ cacti_conf_dir }}/ owner={{ cacti_user }} group={{ apache_group }} mode=0440
  with_items:
    - etc/ss_get_mysql_stats.php.cnf
    - etc/ss_get_by_ssh.php.cnf

- name: Copy Cactilize ruby wrappers
  template: src={{ item }} dest={{ cacti_root_dir }}/cli/ owner={{ cacti_user }} group={{ apache_group }} mode=0440
  with_items:
    - lib/cacti_add_device.rb
    - lib/cacti_add_graph.rb
    - lib/cacti_add_tree.rb

- name: action | install | ensures {{cact_root_dir}} have good mode and chown
  file:
    path="{{cacti_root_dir}}"
    state=directory
    recurse=yes
    mode=0755
    owner={{ cacti_user }}
    group={{ apache_group }}

- name: action | Ensure all file have 0640 mode
  command: find "{{ cacti_root_dir }}" -type f -exec chmod 0640 {} \;

- name: action | Ensure conf file have 0440 mode
  command: chmod 0440 {{ cacti_config_file }}

#- name: action | Ensure RRAs link is writable
#  command: chown -h {{ cacti_user }}:{{ apache_group }} {{ cacti_root_dir }}/rra

- name: action | Ensure RRA dir is writable
  file:
    path="{{ cacti_rra_dir }}"
    state=directory
    recurse=no
    mode=775
    owner={{ cacti_user }}
    group={{ apache_group }}

- name: action | set poller cron
  cron:
    name="Cacti poller cron"
    state=present
    user="{{cacti_user}}"
    minute="*/5"
    hour="*"
    day="*"
    month="*"
    job="php --define suhosin.memory_limit=512M {{ cacti_root_dir }}/poller.php 2>&1 >/dev/null | if [ -f /usr/bin/ts ] ; then ts ; else tee ; fi >> {{ cacti_log_dir }}/cacti.log"

- name: Report
  template: src=report.j2 dest=/root/.cacti owner=root group=root mode=0400
  with_dict: Users
  tags: report
